/* Generated By:JavaCC: Do not edit this line. JSONParser.java */
package thirtytwo.degrees.halfpipe.configuration.json;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Date;
import java.util.List;
import java.util.ArrayList;

import org.apache.commons.configuration.AbstractHierarchicalFileConfiguration;
import org.apache.commons.configuration.tree.ConfigurationNode;
import org.apache.commons.configuration.tree.DefaultConfigurationNode;

import org.apache.commons.lang.StringEscapeUtils;

/**
 * JavaCC based parser for the JSON format.
 *
 * @author Emmanuel Bourg
 * @version $Revision: 1152739 $, $Date: 2011-08-01 04:09:32 -0700 (Mon, 01 Aug 2011) $
 */
@SuppressWarnings({"unchecked", "unused"})
class JSONParser implements JSONParserConstants {

    /**
     * Remove the quotes at the beginning and at the end of the specified String.
     */
    protected String removeQuotes(String s)
    {
        if (s == null)
        {
            return null;
        }

        if (s.startsWith("\"") && s.endsWith("\"") && s.length() >= 2)
        {
            s = s.substring(1, s.length() - 1);
        }

        return s;
    }

  final public JSONConfiguration parse() throws ParseException {
    JSONConfiguration configuration = null;
    configuration = Object();
    jj_consume_token(0);
      {if (true) return configuration;}
    throw new Error("Missing return statement in function");
  }

  final public JSONConfiguration Object() throws ParseException {
    List children = new ArrayList();
    ConfigurationNode child = null;
    jj_consume_token(OBJECT_BEGIN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STRING:
      child = Property();
          if (child != null) children.add(child);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LIST_SEPARATOR:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(LIST_SEPARATOR);
        child = Property();
              if (child != null) children.add(child);
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    jj_consume_token(OBJECT_END);
        JSONConfiguration configuration = new JSONConfiguration();
        ConfigurationNode root = configuration.getRootNode();

        for (int i = 0; i < children.size(); i++)
        {
            child = (ConfigurationNode) children.get(i);
            root.addChild(child);
        }

        {if (true) return configuration;}
    throw new Error("Missing return statement in function");
  }

  final public ConfigurationNode Property() throws ParseException {
    String key = null;
    Object value = null;
    key = String();
    jj_consume_token(SEPARATOR);
    value = Value();
        ConfigurationNode node = null;

        if (value instanceof AbstractHierarchicalFileConfiguration)
        {
            // a configuration is returned when the value is an object
            AbstractHierarchicalFileConfiguration config = (AbstractHierarchicalFileConfiguration) value;
            node = (ConfigurationNode) config.getRootNode();
            node.setName(key);
        }
        else if (value != null)
        {
            node = new DefaultConfigurationNode();
            node.setValue(value);
            node.setName(key);
        }

        {if (true) return node;}
    throw new Error("Missing return statement in function");
  }

  final public Object Value() throws ParseException {
    Object value = null;
    Token token;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY_BEGIN:
      value = Array();
      {if (true) return value;}
      break;
    case OBJECT_BEGIN:
      value = Object();
      {if (true) return value;}
      break;
    case STRING:
      value = String();
      {if (true) return value;}
      break;
    case INTEGER:
      token = jj_consume_token(INTEGER);
      {if (true) return new BigInteger(token.image);}
      break;
    case REAL:
      token = jj_consume_token(REAL);
      {if (true) return new BigDecimal(token.image);}
      break;
    case TRUE:
      token = jj_consume_token(TRUE);
      {if (true) return Boolean.TRUE;}
      break;
    case FALSE:
      token = jj_consume_token(FALSE);
      {if (true) return Boolean.FALSE;}
      break;
    case NULL:
      token = jj_consume_token(NULL);
      {if (true) return null;}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public List Array() throws ParseException {
    List list = new ArrayList();
    Object element = null;
    jj_consume_token(ARRAY_BEGIN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ARRAY_BEGIN:
    case OBJECT_BEGIN:
    case STRING:
    case INTEGER:
    case REAL:
    case TRUE:
    case FALSE:
    case NULL:
      element = Value();
          list.add(element);
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case LIST_SEPARATOR:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(LIST_SEPARATOR);
        element = Value();
              list.add(element);
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(ARRAY_END);
      {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  final public String String() throws ParseException {
    Token token = null;
    token = jj_consume_token(STRING);
      {if (true) return StringEscapeUtils.unescapeJava(removeQuotes(token.image));}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public JSONParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80,0x8000,0x1f8120,0x80,0x1f8120,};
   }

  /** Constructor with InputStream. */
  public JSONParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JSONParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JSONParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JSONParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JSONParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JSONParser(JSONParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JSONParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[31];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 31; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
